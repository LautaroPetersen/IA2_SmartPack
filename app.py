import streamlit as st
st.set_page_config(page_title="Redistribuci√≥n con IA", layout="wide")

import pandas as pd
import toml
from io import BytesIO, StringIO
from docx import Document
import google.generativeai as genai

# -------------------- CONFIGURACI√ìN --------------------

secrets = toml.load("secrets.toml")
api_key = secrets["gemini"]["api_key"]
genai.configure(api_key=api_key)

# -------------------- FUNCI√ìN IA --------------------

def obtener_respuesta_gemini(packing_list, pedidos, instrucciones, observaciones):
    prompt = f"""
Eres un experto en log√≠stica y distribuci√≥n inteligente de productos. Se te proporcionar√° un listado de cajas (Packing List) con su contenido original, y una tabla con los pedidos de diferentes clientes.

Tu tarea es:
1. Analizar ambos documentos.
2. Proponer la redistribuci√≥n m√°s eficiente de las cajas entre los clientes, intentando minimizar la divisi√≥n del contenido original si es posible y respetando observaciones e instrucciones espec√≠ficas. 
3. Indicar si queda mercader√≠a en stock, que no sera redistribuida	a ninguno de los clientes.
4. Generar una explicaci√≥n clara de la l√≥gica utilizada.
5. Generar una tabla de redistribuci√≥n con las cajas y sus contenidos, y referencia a la caja original.

6. Generar el contenido de las etiquetas para cada nueva caja, separadas por "---" entre una y otra. Cada etiqueta debe incluir:
- Todo lo descripto en las instrucciones adicionales y observaciones
- Nombre del cliente
- N√∫mero de caja nueva
- Caja original de referencia
- Descripci√≥n del producto
- Talle/variante + cantidad


‚ö†Ô∏è Importante:
- La tabla debe ser completa, sin omisiones ni cortes.
- No resumir resultados, mostrar todas las filas aunque sean muchas.
- El contenido debe estar correctamente alineado con separadores `|` para que pueda ser procesado como tabla markdown.
- Separar las tres secciones con los encabezados:
  EXPLICACI√ìN:
  TABLA DE REDISTRIBUCI√ìN:
  ETIQUETAS:

Datos proporcionados:
Packing List:
{packing_list}

Pedidos de Clientes:
{pedidos}

Instrucciones adicionales:
{instrucciones}

Observaciones:
{observaciones}
"""
    model = genai.GenerativeModel("gemini-2.0-flash")
    response = model.generate_content(
        prompt,
        generation_config={
            "max_output_tokens": 8192,
            "temperature": 0.7,
            "top_p": 0.9,
            "top_k": 40
        }
    )
    return response.text

# -------------------- PROCESAR RESPUESTA --------------------

def procesar_respuesta_gemini(respuesta):
    explicacion, tabla, etiquetas = "", "", []
    partes = respuesta.split("ETIQUETAS:")
    if len(partes) == 2:
        etiquetas = [e.strip() for e in partes[1].split("---") if e.strip()]
    cuerpo = partes[0].split("TABLA DE REDISTRIBUCI√ìN:")
    if len(cuerpo) == 2:
        explicacion = cuerpo[0].replace("EXPLICACI√ìN:", "").strip()
        tabla = cuerpo[1].strip()
    return explicacion, tabla, etiquetas

# -------------------- FUNCIONES DE ARCHIVOS --------------------

def tabla_markdown_a_df(tabla_md):
    if "|" not in tabla_md:
        raise ValueError("La tabla generada por la IA no tiene formato markdown v√°lido.")
    lineas = [l for l in tabla_md.strip().splitlines() if "|" in l and "---" not in l]
    if len(lineas) < 3:
        raise ValueError("La tabla es demasiado corta o mal estructurada.")
    tabla_limpia = "\n".join(lineas)
    try:
        df = pd.read_csv(StringIO(tabla_limpia), sep="|")
        df = df.iloc[:, 1:-1]
        df.columns = [c.strip() for c in df.columns]
        return df.dropna(how="all").reset_index(drop=True)
    except Exception as e:
        raise ValueError(f"No se pudo procesar la tabla: {e}")

def generar_excel(df):
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="Redistribuci√≥n")
    buffer.seek(0)
    return buffer

def generar_docx(etiquetas):
    doc = Document()
    for etiqueta in etiquetas:
        for linea in etiqueta.splitlines():
            doc.add_paragraph(linea)
        doc.add_paragraph("-" * 40)
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# -------------------- STREAMLIT UI --------------------

st.title("üì¶ Redistribuci√≥n Inteligente de Productos con IA")

with st.expander("‚ÑπÔ∏è C√≥mo funciona"):
    st.markdown("""
Esta aplicaci√≥n utiliza inteligencia artificial (Gemini) para redistribuir autom√°ticamente el contenido de un pedido entre varios clientes, a partir de un packing list y sus respectivos pedidos.

**¬øQu√© hace?**
- Analiza el contenido original de las cajas
- Interpreta los pedidos de cada cliente
- Propone la redistribuci√≥n m√°s eficiente (intentando no dividir cajas innecesariamente)

**¬øQu√© devuelve?**
- Una explicaci√≥n estrat√©gica de la redistribuci√≥n
- Un archivo Excel con el detalle completo de la redistribuci√≥n
- Un archivo Word con las etiquetas para cada caja nueva

**¬øQu√© necesit√°s subir?**
1. Packing List original (.xlsx)
2. Tabla de pedidos por cliente (.xlsx)
3. (Opcional) Instrucciones para el formato de etiquetas
4. (Opcional) Observaciones especiales como l√≠mites por caja, prioridades, etc.
""")

packing_file = st.file_uploader("üì• Packing List (.xlsx)", type=["xlsx"])
pedidos_file = st.file_uploader("üì• Pedidos de Clientes (.xlsx)", type=["xlsx"])
instrucciones = st.text_area("üìå Instrucciones para etiquetas (opcional)")
observaciones = st.text_area("üìù Observaciones adicionales (opcional)")

if st.button("üöÄ Generar Redistribuci√≥n con IA"):
    if not packing_file or not pedidos_file:
        st.warning("Por favor carg√° ambos archivos.")
    else:
        packing_df = pd.read_excel(packing_file)
        pedidos_df = pd.read_excel(pedidos_file)
        st.session_state["packing_list"] = packing_df.to_markdown(index=False)
        st.session_state["pedidos"] = pedidos_df.to_markdown(index=False)

        with st.spinner("üß† Pensando con IA..."):
            respuesta = obtener_respuesta_gemini(
                st.session_state["packing_list"],
                st.session_state["pedidos"],
                instrucciones,
                observaciones
            )
            explicacion, tabla, etiquetas = procesar_respuesta_gemini(respuesta)
            st.session_state["explicacion"] = explicacion
            st.session_state["tabla_md"] = tabla
            st.session_state["etiquetas"] = etiquetas

            try:
                df_tabla = tabla_markdown_a_df(tabla)
                st.session_state["df_tabla"] = df_tabla
                st.success("‚úÖ Redistribuci√≥n generada correctamente.")
            except Exception as e:
                st.error(f"‚ùå Error al procesar la tabla: {e}")
                st.stop()

# Mostrar resultados y descargas
if "explicacion" in st.session_state:
    st.subheader("üß† Explicaci√≥n generada por la IA")
    st.markdown(st.session_state["explicacion"])

if "df_tabla" in st.session_state:
    excel_file = generar_excel(st.session_state["df_tabla"])
    st.download_button("üì• Descargar Excel de Redistribuci√≥n", data=excel_file, file_name="redistribucion.xlsx")

if "etiquetas" in st.session_state:
    etiquetas_docx = generar_docx(st.session_state["etiquetas"])
    st.download_button("üìÑ Descargar Etiquetas (Word)", data=etiquetas_docx, file_name="etiquetas.docx")
